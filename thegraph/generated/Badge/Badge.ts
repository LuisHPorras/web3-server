// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BadgeIssued extends ethereum.Event {
  get params(): BadgeIssued__Params {
    return new BadgeIssued__Params(this);
  }
}

export class BadgeIssued__Params {
  _event: BadgeIssued;

  constructor(event: BadgeIssued) {
    this._event = event;
  }

  get id(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get issuerName(): string {
    return this._event.parameters[1].value.toString();
  }

  get recipientName(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Badge__badgesByIdResult {
  value0: i32;
  value1: Address;
  value2: string;
  value3: Address;
  value4: string;

  constructor(
    value0: i32,
    value1: Address,
    value2: string,
    value3: Address,
    value4: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }
}

export class Badge extends ethereum.SmartContract {
  static bind(address: Address): Badge {
    return new Badge("Badge", address);
  }

  badgesById(param0: i32): Badge__badgesByIdResult {
    let result = super.call(
      "badgesById",
      "badgesById(uint16):(uint16,address,string,address,string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return new Badge__badgesByIdResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toAddress(),
      result[4].toString()
    );
  }

  try_badgesById(param0: i32): ethereum.CallResult<Badge__badgesByIdResult> {
    let result = super.tryCall(
      "badgesById",
      "badgesById(uint16):(uint16,address,string,address,string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Badge__badgesByIdResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toAddress(),
        value[4].toString()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get _issuerName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _recipientName(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }
}
